/* # Developer notes

- Symbols that start with a double underscore (__) are considered "private"

- Symbols that start with a single underscore (_) are considered "semi-public";
  they can be overridden in a user linker script, but should not be referred
  user code (e.g. `extern "C" { static mut __sbss }`).

- `EXTERN` forces the linker to keep a symbol in the final binary. We use this
  to make sure a symbol is not dropped if it appears in or near the front of the
  linker arguments and "it's not needed" by any of the preceding objects
  (linker arguments)

- On alignment: 
*/

/* Provides information about the memory layout of the device */
/* This will be provided by the user (see `memory.x`) or by a Board Support Crate */
INCLUDE memory.x

/* # Entry point = reset vector */
EXTERN(__RESET_VECTOR);
EXTERN(Reset);
ENTRY(Reset);

/* # Exception vectors */
/* This is effectively weak aliasing at the linker level */
/* The user can override any of these aliases by defining the corresponding
symbol them selves (cf. the `exception!` macro) */
EXTERN(__EXCEPTIONS); /* depends on all these PROVIDED symbols */

EXTERN(DefaultHandler);

PROVIDE(BusError = DefaultHandler);
PROVIDE(AddressError = DefaultHandler);
PROVIDE(IllegalInstruction = DefaultHandler);
PROVIDE(ZeroDivide = DefaultHandler);
PROVIDE(CHKInstruction = DefaultHandler);
PROVIDE(TRAPVInstruction = DefaultHandler);
PROVIDE(PrivilegeViolation = DefaultHandler);
PROVIDE(Trace = DefaultHandler);
PROVIDE(Line1010Emulator = DefaultHandler);
PROVIDE(Line1111Emulator = DefaultHandler);
PROVIDE(FormatError = DefaultHandler);

PROVIDE(DefaultHandler = DefaultHandler_);

/* # Interrupt vectors */
EXTERN(__INTERRUPTS); /* `static` variable similar to `__EXCEPTIONS` */

/* # Pre-initialization function */
/* If the user overrides this using the `pre_init!` macro or by creating a
   `__pre_init` function, then the function this points to will be called before
   the RAM is initialized. */
PROVIDE(__pre_init = DefaultPreInit);

/* # Sections */
SECTIONS
{
    PROVIDE(_ram_start = ORIGIN(RAM));
    PROVIDE(_ram_end = ORIGIN(RAM) + LENGTH(RAM));
    PROVIDE(_stack_start = _ram_end);
    
    /* ## Sections in ROM */
    /* ### Vector table */
    .vector_table ORIGIN(ROM) :
    {
        __vector_table = .;

        /* Initial Supervisor Stack Pointer (SSP) value.
           Mask the bottom two bits to force 4-byte alignment.
        */
        LONG(_stack_start & 0xFFFFFFFC)
        
        /* Reset vector */
        KEEP(*(.vector_table.reset_vector)); /* this is the `__RESET_VECTOR` symbol */
        __reset_vector = .;
        
        /* Exceptions */
        KEEP(*(.vector_table.exceptions)); /* this is the `__EXCEPTIONS` symbol */
        __eexceptions = .;
        
        /* Interrupts */
        KEEP(*(.vector_table.interrupts)); /* This is the `__INTERRUPTS` symbol */
    } > ROM
    
    PROVIDE(_stext = ADDR(.vector_table) + SIZEOF(.vector_table));

    /* ### .text */
    .text _stext :
    {
        __stext = .;
        *(.Reset);

        *(.text .text.*);

        . = ALIGN(4);
        __etext = .;
    } > ROM
    
    /* ### .rodata */
    .rodata : ALIGN(4)
    {
        . = ALIGN(4);
        __srodata = .;
        *(.rodata .rodata.*);

        /* 4-byte align the end (VMA) of this section.
           This is required by LLD to ensure the LMA of the following .data
           section will have the correct alignment. */
        . = ALIGN(4);
        __erodata = .;
    } > ROM
    
    /* ## Sections in RAM */
    /* ### .data */
    .data : ALIGN(4)
    {
        . = ALIGN(4);
        __sdata = .;
        *(.data .data.*);
        . = ALIGN(4); /* 4-byte align the end (VMA) of this section */
    } > RAM AT>ROM
    /* Allow sections from user `memory.x` injected using `INSERT AFTER .data`
     * to use the .data loading mechanism by pushing __edata. Note: do not
     * change output region or load region in those user sections! */
    . = ALIGN(4);
    __edata = .;

    /* LMA of .data */
    __sidata = LOADADDR(.data);
    
    /* ### .bss */
    .bss (NOLOAD) : ALIGN(4)
    {
        . = ALIGN(4);
        __sbss = .;
        *(.bss .bss.*);
        *(COMMON); /* Uninitialized C statics */
        . = ALIGN(4); /* 4-byte align the end (VMA) of this section */
    } > RAM
    /* Allow sections from user `memory.x` injected using `INSERT AFTER .bss` to
     * use the .data loading mechanism by pushing __ebss. Note: do not change
     * output region or load region in those user sections! */
    . = ALIGN(4);
    __ebss = .;
    
    /* ## .got */
    /* Dynamic relocations are unsupported. This section is only used to detect
     * relocatable code in the input files and raise an error if relocatable
     * code is found */
    .got (NOLOAD) :
    {
        KEEP(*(.got .got.*));
    }
}